name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize] 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Change to project directory and build
        id: build
        run: |
          cd packages/assignment-61
          npm run build 2>&1 | tee build_error.log
          cp build_error.log $GITHUB_WORKSPACE/build_error.log
        continue-on-error: true

      - name: List directory contents
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of current directory:"
          ls -R
          echo "Contents of GITHUB_WORKSPACE:"
          ls -R $GITHUB_WORKSPACE

      - name: Comment PR on Build Failure
        if: failure() || steps.build.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const path = require('path')
            
            function findFile(name, dir) {
              const files = fs.readdirSync(dir)
              for (const file of files) {
                const filePath = path.join(dir, file)
                const stat = fs.statSync(filePath)
                if (stat.isDirectory()) {
                  const found = findFile(name, filePath)
                  if (found) return found
                } else if (file === name) {
                  return filePath
                }
              }
            }
            
            try {
              console.log('Current working directory:', process.cwd())
              console.log('GITHUB_WORKSPACE:', process.env.GITHUB_WORKSPACE)
              
              const possiblePaths = [
                'build_error.log',
                path.join(process.env.GITHUB_WORKSPACE, 'build_error.log'),
                path.join(process.env.GITHUB_WORKSPACE, 'packages', 'assignment-6', 'build_error.log')
              ]
              
              let buildErrorLogPath
              for (const p of possiblePaths) {
                if (fs.existsSync(p)) {
                  buildErrorLogPath = p
                  break
                }
              }
              
              if (!buildErrorLogPath) {
                buildErrorLogPath = findFile('build_error.log', process.env.GITHUB_WORKSPACE)
              }
              
              if (buildErrorLogPath) {
                console.log('Found log file at:', buildErrorLogPath)
                const buildErrorLog = fs.readFileSync(buildErrorLogPath, 'utf8')
                
                let failureReasons = []
                if (buildErrorLog.includes('error TS')) {
                  failureReasons.push('TypeScript Compilation Error')
                }
                if (buildErrorLog.includes('vite build') && buildErrorLog.includes('error')) {
                  failureReasons.push('Vite Build Error')
                }
                if (failureReasons.length === 0) {
                  failureReasons.push('Unknown Build Error')
                }
                
                let commentBody = `## Build Failed: ${failureReasons.join(' and ')}\n\n`
                commentBody += '### Build Log\n\n```\n' + buildErrorLog + '\n```'
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                })
              } else {
                console.error('Build error log file not found after searching')
                core.setFailed('Build error log file not found after searching')
              }
            } catch (error) {
              console.error('Error in comment creation:', error)
              core.setFailed(`Action failed with error: ${error}`)
            }

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2구현
        run: echo "job2의 내용을 구현해주세요"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"