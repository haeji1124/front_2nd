name: CI Assignment 6

on:
  pull_request:
    types:
      [opened, synchronize]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run build
        id: build
        run: |
          pnpm -F assignment-6 build > build.log 2>&1
          exit_code=$?
          echo "build_exit_code=$exit_code" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment build results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const buildStatus = '${{ steps.build.outputs.build_exit_code }}' === '0' ? '성공' : '실패';
            const buildEmoji = buildStatus === '성공' ? '✅' : '❌';
            const buildLog = fs.readFileSync('build.log', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 빌드 ${buildStatus} ${buildEmoji}\n\`\`\`\n${buildLog}\n\`\`\``
            });

      - name: Check build result
        if: steps.build.outputs.build_exit_code != '0'
        run: exit 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies.
        run: pnpm install 

      - name: run lint
        run: |
          pnpm -F assignment-6 lint 2>&1 | tee lint.log
          exit ${PIPESTATUS[0]}
      - name: Comment on PR if lint fails
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const log = fs.readFileSync('lint.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### ❌ Lint Failed\n\`\`\`\n${log}\n\`\`\``
            });


  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm -F assignment-6 test:coverage

      - name: List coverage directory
        run: ls -R packages/assignment-6/coverage

      - name: Print coverage file content
        run: |
          echo "Coverage file content:"
          cat packages/assignment-6/coverage/coverage-final.json | head -n 50
          echo "File structure:"
          ls -R packages/assignment-6/coverage

      - name: Comment test results
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const coverageFile = path.join(process.cwd(), 'packages', 'assignment-6', 'coverage', 'coverage-final.json');
              const coverageJson = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
              
              let totalStatements = 0;
              let coveredStatements = 0;
              let totalBranches = 0;
              let coveredBranches = 0;
              let totalFunctions = 0;
              let coveredFunctions = 0;
              let totalLines = 0;
              let coveredLines = 0;
              
              Object.values(coverageJson).forEach(file => {
                if (file.s) {
                  totalStatements += Object.keys(file.s).length;
                  coveredStatements += Object.values(file.s).filter(v => v > 0).length;
                }
                if (file.b) {
                  totalBranches += Object.keys(file.b).length;
                  coveredBranches += Object.values(file.b).filter(branch => branch[0] > 0 || branch[1] > 0).length;
                }
                if (file.f) {
                  totalFunctions += Object.keys(file.f).length;
                  coveredFunctions += Object.values(file.f).filter(v => v > 0).length;
                }
                if (file.l) {
                  totalLines += Object.keys(file.l).length;
                  coveredLines += Object.values(file.l).filter(v => v > 0).length;
                }
              });
              
              const calculatePercentage = (covered, total) => ((covered / total) * 100).toFixed(2);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 테스트 성공✅ 
                \n### 커버리지 결과\n
                
                • 라인 커버리지: ${calculatePercentage(coveredLines, totalLines)}%
                • 브랜치 커버리지: ${calculatePercentage(coveredBranches, totalBranches)}%
                • 함수 커버리지: ${calculatePercentage(coveredFunctions, totalFunctions)}%
                • 구문 커버리지: ${calculatePercentage(coveredStatements, totalStatements)}%`
              });
            } catch (error) {
              console.error('Error processing coverage data:', error);
              core.setFailed(`Failed to process coverage data: ${error.message}`);
            }

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        run: pnpm -F assignment-6 lhci

      - name: Comment Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lighthouseResults = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json',, 'utf8'));
            
            const scores = {
              performance: lighthouseResults[0].categories.performance.score * 100,
              accessibility: lighthouseResults[0].categories.accessibility.score * 100,
              'best-practices': lighthouseResults[0].categories['best-practices'].score * 100,
              seo: lighthouseResults[0].categories.seo.score * 100
            };

            const comment = `
            ## Lighthouse 성능 측정 결과

            | 카테고리 | 점수 |
            |----------|------|
            | Performance | ${scores.performance.toFixed(0)}% |
            | Accessibility | ${scores.accessibility.toFixed(0)}% |
            | Best Practices | ${scores['best-practices'].toFixed(0)}% |
            | SEO | ${scores.seo.toFixed(0)}% |
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Assign random reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const teams = ["bbbjihan", "soojjung", "hhyewon", "hyesung99", "shiny1912"];
            const randomReviewer = teams[Math.floor(Math.random() * teams.length)];
            
            // PR 코멘트 작성
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 🙏🏻 랜덤 리뷰 요청 \n@${randomReviewer} 님에게 리뷰를 요청드립니다.`
            });
            
            // 리뷰어 할당
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: [randomReviewer]
              });
              console.log(`Successfully assigned ${randomReviewer} as a reviewer.`);
            } catch (error) {
              console.error(`Failed to assign reviewer: ${error.message}`);
              // 리뷰어 할당 실패 시 코멘트 추가
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `리뷰어 할당에 실패했습니다. 수동으로 리뷰어를 추가해주세요.`
              });
            }
