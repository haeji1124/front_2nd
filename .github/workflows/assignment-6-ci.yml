name: CI Assignment 6

on:
  pull_request:
    types:
      [opened, synchronize]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Run build and Comment on PR if build fails
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const { execSync } = require('child_process');
            let buildLog = '';
            try {
              buildLog = execSync('pnpm -F assignment-6 build 2>&1').toString();
            } catch (error) {
              buildLog = error.stdout.toString();
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ❌ Build Failed\n\`\`\`\n${buildLog}\n\`\`\``
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies.
        run: pnpm install

      - name: lint
        id: lint
        run: |
          pnpm -F assignment-6 lint 2>&1 | tee error.log
          exit ${PIPESTATUS[0]}
      - name: Comment PR
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const errorLog = fs.readFileSync('error.log', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### lint error ${errorLog}`
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: pnpm install

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        run: pnpm -F assignment-6 lhci

      - name: Comment Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lighthouseResults = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json',, 'utf8'));
            
            const scores = {
              performance: lighthouseResults[0].categories.performance.score * 100,
              accessibility: lighthouseResults[0].categories.accessibility.score * 100,
              'best-practices': lighthouseResults[0].categories['best-practices'].score * 100,
              seo: lighthouseResults[0].categories.seo.score * 100
            };

            const comment = `
            ## Lighthouse 성능 측정 결과

            | 카테고리 | 점수 |
            |----------|------|
            | Performance | ${scores.performance.toFixed(0)}% |
            | Accessibility | ${scores.accessibility.toFixed(0)}% |
            | Best Practices | ${scores['best-practices'].toFixed(0)}% |
            | SEO | ${scores.seo.toFixed(0)}% |
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Mention Reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const reviewers = ["bbbjihan", "hhyewon", "soojjung"];
            const randomReviewer = reviewers[Math.floor(Math.random() * reviewers.length)];

            try {
              // 코멘트 작성
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `@${randomReviewer}, 리뷰를 부탁드립니다.`
              });

              console.log(`Comment mentioning ${randomReviewer} has been posted.`);

              // 리뷰어 지정 시도 (권한 문제로 실패할 수 있음)
              try {
                await github.rest.pulls.requestReviewers({
                  pull_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  reviewers: [randomReviewer]
                });
                console.log(`${randomReviewer} has been assigned as a reviewer.`);
              } catch (reviewerError) {
                console.log(`Failed to assign reviewer. Error: ${reviewerError.message}`);
                console.log('Continuing without assigning reviewer.');
              }
            } catch (error) {
              console.log(`An error occurred: ${error.message}`);
              core.setFailed(`Action failed with error: ${error.message}`);
            }
