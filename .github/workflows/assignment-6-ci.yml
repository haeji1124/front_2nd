name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize] 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm install --legacy-peer-deps
      
      - name: Change to project directory and build
        run: |
          cd packages/assignment-61
          npm run tsc > tsc_output.txt 2>&1 || echo "TSC_FAILED=true" >> $GITHUB_ENV
          npm run build > build_output.txt 2>&1 || echo "BUILD_FAILED=true" >> $GITHUB_ENV
      
      - name: Comment build errors
        if: env.TSC_FAILED == 'true' || env.BUILD_FAILED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let errorMessage = 'Build Process Errors:\n\n';
            
            if (process.env.TSC_FAILED === 'true') {
              const tscOutput = require('fs').readFileSync('packages/assignment-61/tsc_output.txt', 'utf8');
              errorMessage += `TypeScript Compilation Errors:\n\`\`\`\n${tscOutput}\n\`\`\`\n\n`;
            }
            
            if (process.env.BUILD_FAILED === 'true') {
              const buildOutput = require('fs').readFileSync('packages/assignment-61/build_output.txt', 'utf8');
              errorMessage += `Build Errors:\n\`\`\`\n${buildOutput}\n\`\`\`\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorMessage
            })

      - name: Check build result
        if: env.TSC_FAILED == 'true' || env.BUILD_FAILED == 'true'
        run: exit 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
      
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: |
          cd packages/assignment-6
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint_report.json || echo "LINT_FAILED=true" >> $GITHUB_ENV
        
      - name: Comment ESLint output
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            let eslintOutput = ''
            try {
              eslintOutput = fs.readFileSync('/home/runner/work/front_2nd/front_2nd/packages/assignment-6/eslint_output.txt', 'utf8')
            } catch (error) {
              console.error('Error reading ESLint output:', error)
              eslintOutput = 'Unable to read ESLint output'
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ESLint found issues:\n\n\`\`\`\n${eslintOutput}\n\`\`\``
            })

      - name: Check lint result
        if: env.LINT_FAILED == 'true'
        run: exit 1
        
  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"