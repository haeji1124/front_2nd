name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize] 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm install --legacy-peer-deps
      
      - name: Change to project directory and build
        run: |
          cd packages/assignment-6
          npm run tsc || echo "TypeScript compilation failed"
          npm run build || echo "Build failed"
      
      - name: Comment build errors
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'TSC or Build failed. Please check the logs for more details.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
      
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: |
          cd packages/assignment-6
          npm run lint || echo "Linting failed"
        
      - name: Comment ESLint errors
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            let lintOutput = ''
            try {
              lintOutput = fs.readFileSync('/home/runner/work/react-assignment/react-assignment/packages/assignment-6/lint_output.txt', 'utf8')
              
              // ESLint 결과 파싱
              const lines = lintOutput.split('\n')
              let formattedOutput = 'ESLint Results\n\n'
              let errorCount = 0
              let warningCount = 0
              
              for (const line of lines) {
                if (line.includes('error') || line.includes('warning')) {
                  formattedOutput += line + '\n'
                  if (line.includes('error')) errorCount++
                  if (line.includes('warning')) warningCount++
                }
              }
              
              formattedOutput += `\n✖ ${errorCount + warningCount} problem${errorCount + warningCount !== 1 ? 's' : ''} (${errorCount} error${errorCount !== 1 ? 's' : ''}, ${warningCount} warning${warningCount !== 1 ? 's' : ''})`
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: formattedOutput
              })
            } catch (error) {
              console.error('Error reading or parsing lint output:', error)
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Unable to read or parse lint output'
              })
            }

      - name: Check lint result
        if: env.LINT_FAILED == 'true'
        run: exit 1

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"