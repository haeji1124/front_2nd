name: CI Assignment 6

on:
  pull_request:
    types:
      [opened, synchronize]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Run build and Comment on PR if build fails
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const { execSync } = require('child_process');
            let buildLog = '';
            try {
              buildLog = execSync('pnpm -F assignment-6 build 2>&1').toString();
            } catch (error) {
              buildLog = error.stdout.toString();
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ❌ Build Failed\n\`\`\`\n${buildLog}\n\`\`\``
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Comment on PR if lint fails
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const { execSync } = require('child_process');
            let lintLog = '';
            try {
              lintLog = execSync('pnpm -F assignment-6 lint 2>&1').toString();
            } catch (error) {
              lintLog = error.stdout.toString();
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ❌ Lint Failed\n\`\`\`\n${lintLog}\n\`\`\``
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Testing and Coverage
        run: |
          pnpm install --prefer-frozen-lockfile
          pnpm -F assignment-6 test
          pnpm -F assignment-6 coverage

      - name: Comment Test Coverage
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');

            const coverage = JSON.parse(fs.readFileSync("packages/assignment-6/coverage/coverage-summary.json", 'utf8'));
            const totalCoverage = coverage.total;

            const coverageComment = `

            ## 테스트 성공 ✅
            ### 커버리지 결과

            - 라인 커버리지: ${totalCoverage.lines.pct}%
            - 브랜치 커버리지: ${totalCoverage.branches.pct}%
            - 함수 커버리지: ${totalCoverage.functions.pct}%
            - 구문 커버리지: ${totalCoverage.statements.pct}%
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });

      - name: Comment Test Coverage on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const coverageComment = `
              ## 테스트 실패 ❌

              테스트 코드를 확인해주세요.
            `
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            }); 

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
