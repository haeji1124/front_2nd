name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize] 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Change to project directory and build
        id: build
        run: |
          cd packages/assignment-6
          npm run build > build_output.log 2>&1 || true
          echo "Build completed. Check build_output.log for details."

      - name: Upload build log
        uses: actions/upload-artifact@v2
        with:
          name: build-log
          path: packages/assignment-6/build_output.log

      - name: Comment PR on Build Failure
        if: failure() || steps.build.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const path = require('path')
            
            async function downloadArtifact(name) {
              const artifact = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              }).then(res => res.data.artifacts.find(a => a.name === name))
              
              if (!artifact) throw new Error(`Artifact '${name}' not found`)
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              })
              
              const AdmZip = require('adm-zip')
              const zip = new AdmZip(Buffer.from(download.data))
              zip.extractAllTo('.')
              
              return fs.readFileSync('build_output.log', 'utf8')
            }
            
            try {
              console.log('Downloading build log artifact...')
              const buildLog = await downloadArtifact('build-log')
              
              let failureReasons = []
              if (buildLog.includes('error TS')) {
                failureReasons.push('TypeScript Compilation Error')
              }
              if (buildLog.includes('vite build') && buildLog.includes('error')) {
                failureReasons.push('Vite Build Error')
              }
              if (failureReasons.length === 0) {
                failureReasons.push('Unknown Build Error')
              }
              
              let commentBody = `## Build Failed: ${failureReasons.join(' and ')}\n\n`
              commentBody += '### Build Log\n\n```\n' + buildLog + '\n```'
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
            } catch (error) {
              console.error('Error in comment creation:', error)
              core.setFailed(`Action failed with error: ${error}`)
            }

      - name: Check build result
        if: steps.build.outcome == 'failure'
        run: exit 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2구현
        run: echo "job2의 내용을 구현해주세요"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"