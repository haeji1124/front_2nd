name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize] 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm install 

      - name: Change to project directory and build
        id: build
        run: |
          cd packages/assignment-6
          npm run build 2>&1 | tee build_error.log || true
        continue-on-error: true

      - name: Comment PR on Build Failure
        if: failure() || steps.build.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const buildErrorLog = fs.readFileSync(process.env.GITHUB_WORKSPACE + '/packages/assignment-6/build_error.log', 'utf8')
            
            let failureReasons = []
            if (buildErrorLog.includes('error TS')) {
              failureReasons.push('TypeScript Compilation Error')
            }
            if (buildErrorLog.includes('vite build') && buildErrorLog.includes('error')) {
              failureReasons.push('Vite Build Error')
            }
            if (failureReasons.length === 0) {
              failureReasons.push('Unknown Build Error')
            }
            
            let commentBody = `## Build Failed: ${failureReasons.join(' and ')}\n\n`
            commentBody += '### Build Log\n\n```\n' + buildErrorLog + '\n```'
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2구현
        run: echo "job2의 내용을 구현해주세요"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"